//
// Created by Firmament on 17/04/2023.
//

#ifndef ANGELSCRIPT_JIT_H
	#define ANGELSCRIPT_JIT_H

	// Byte code instructions
	typedef enum {
		asBC_PopPtr			= 0,
		asBC_PshGPtr		= 1,
		asBC_PshC4			= 2,
		asBC_PshV4			= 3,
		asBC_PSF			= 4,
		asBC_SwapPtr		= 5,
		asBC_NOT			= 6,
		asBC_PshG4			= 7,
		asBC_LdGRdR4		= 8,
		asBC_CALL			= 9,
		asBC_RET			= 10,
		asBC_JMP			= 11,
		asBC_JZ				= 12,
		asBC_JNZ			= 13,
		asBC_JS				= 14,
		asBC_JNS			= 15,
		asBC_JP				= 16,
		asBC_JNP			= 17,
		asBC_TZ				= 18,
		asBC_TNZ			= 19,
		asBC_TS				= 20,
		asBC_TNS			= 21,
		asBC_TP				= 22,
		asBC_TNP			= 23,
		asBC_NEGi			= 24,
		asBC_NEGf			= 25,
		asBC_NEGd			= 26,
		asBC_INCi16			= 27,
		asBC_INCi8			= 28,
		asBC_DECi16			= 29,
		asBC_DECi8			= 30,
		asBC_INCi			= 31,
		asBC_DECi			= 32,
		asBC_INCf			= 33,
		asBC_DECf			= 34,
		asBC_INCd			= 35,
		asBC_DECd			= 36,
		asBC_IncVi			= 37,
		asBC_DecVi			= 38,
		asBC_BNOT			= 39,
		asBC_BAND			= 40,
		asBC_BOR			= 41,
		asBC_BXOR			= 42,
		asBC_BSLL			= 43,
		asBC_BSRL			= 44,
		asBC_BSRA			= 45,
		asBC_COPY			= 46,
		asBC_PshC8			= 47,
		asBC_PshVPtr		= 48,
		asBC_RDSPtr			= 49,
		asBC_CMPd			= 50,
		asBC_CMPu			= 51,
		asBC_CMPf			= 52,
		asBC_CMPi			= 53,
		asBC_CMPIi			= 54,
		asBC_CMPIf			= 55,
		asBC_CMPIu			= 56,
		asBC_JMPP			= 57,
		asBC_PopRPtr		= 58,
		asBC_PshRPtr		= 59,
		asBC_STR			= 60,
		asBC_CALLSYS		= 61,
		asBC_CALLBND		= 62,
		asBC_SUSPEND		= 63,
		asBC_ALLOC			= 64,
		asBC_FREE			= 65,
		asBC_LOADOBJ		= 66,
		asBC_STOREOBJ		= 67,
		asBC_GETOBJ			= 68,
		asBC_REFCPY			= 69,
		asBC_CHKREF			= 70,
		asBC_GETOBJREF		= 71,
		asBC_GETREF			= 72,
		asBC_PshNull		= 73,
		asBC_ClrVPtr		= 74,
		asBC_OBJTYPE		= 75,
		asBC_TYPEID			= 76,
		asBC_SetV4			= 77,
		asBC_SetV8			= 78,
		asBC_ADDSi			= 79,
		asBC_CpyVtoV4		= 80,
		asBC_CpyVtoV8		= 81,
		asBC_CpyVtoR4		= 82,
		asBC_CpyVtoR8		= 83,
		asBC_CpyVtoG4		= 84,
		asBC_CpyRtoV4		= 85,
		asBC_CpyRtoV8		= 86,
		asBC_CpyGtoV4		= 87,
		asBC_WRTV1			= 88,
		asBC_WRTV2			= 89,
		asBC_WRTV4			= 90,
		asBC_WRTV8			= 91,
		asBC_RDR1			= 92,
		asBC_RDR2			= 93,
		asBC_RDR4			= 94,
		asBC_RDR8			= 95,
		asBC_LDG			= 96,
		asBC_LDV			= 97,
		asBC_PGA			= 98,
		asBC_CmpPtr			= 99,
		asBC_VAR			= 100,
		asBC_iTOf			= 101,
		asBC_fTOi			= 102,
		asBC_uTOf			= 103,
		asBC_fTOu			= 104,
		asBC_sbTOi			= 105,
		asBC_swTOi			= 106,
		asBC_ubTOi			= 107,
		asBC_uwTOi			= 108,
		asBC_dTOi			= 109,
		asBC_dTOu			= 110,
		asBC_dTOf			= 111,
		asBC_iTOd			= 112,
		asBC_uTOd			= 113,
		asBC_fTOd			= 114,
		asBC_ADDi			= 115,
		asBC_SUBi			= 116,
		asBC_MULi			= 117,
		asBC_DIVi			= 118,
		asBC_MODi			= 119,
		asBC_ADDf			= 120,
		asBC_SUBf			= 121,
		asBC_MULf			= 122,
		asBC_DIVf			= 123,
		asBC_MODf			= 124,
		asBC_ADDd			= 125,
		asBC_SUBd			= 126,
		asBC_MULd			= 127,
		asBC_DIVd			= 128,
		asBC_MODd			= 129,
		asBC_ADDIi			= 130,
		asBC_SUBIi			= 131,
		asBC_MULIi			= 132,
		asBC_ADDIf			= 133,
		asBC_SUBIf			= 134,
		asBC_MULIf			= 135,
		asBC_SetG4			= 136,
		asBC_ChkRefS		= 137,
		asBC_ChkNullV		= 138,
		asBC_CALLINTF		= 139,
		asBC_iTOb			= 140,
		asBC_iTOw			= 141,
		asBC_SetV1			= 142,
		asBC_SetV2			= 143,
		asBC_Cast			= 144,
		asBC_i64TOi			= 145,
		asBC_uTOi64			= 146,
		asBC_iTOi64			= 147,
		asBC_fTOi64			= 148,
		asBC_dTOi64			= 149,
		asBC_fTOu64			= 150,
		asBC_dTOu64			= 151,
		asBC_i64TOf			= 152,
		asBC_u64TOf			= 153,
		asBC_i64TOd			= 154,
		asBC_u64TOd			= 155,
		asBC_NEGi64			= 156,
		asBC_INCi64			= 157,
		asBC_DECi64			= 158,
		asBC_BNOT64			= 159,
		asBC_ADDi64			= 160,
		asBC_SUBi64			= 161,
		asBC_MULi64			= 162,
		asBC_DIVi64			= 163,
		asBC_MODi64			= 164,
		asBC_BAND64			= 165,
		asBC_BOR64			= 166,
		asBC_BXOR64			= 167,
		asBC_BSLL64			= 168,
		asBC_BSRL64			= 169,
		asBC_BSRA64			= 170,
		asBC_CMPi64			= 171,
		asBC_CMPu64			= 172,
		asBC_ChkNullS		= 173,
		asBC_ClrHi			= 174,
		asBC_JitEntry		= 175,
		asBC_CallPtr		= 176,
		asBC_FuncPtr		= 177,
		asBC_LoadThisR		= 178,
		asBC_PshV8			= 179,
		asBC_DIVu			= 180,
		asBC_MODu			= 181,
		asBC_DIVu64			= 182,
		asBC_MODu64			= 183,
		asBC_LoadRObjR		= 184,
		asBC_LoadVObjR		= 185,
		asBC_RefCpyV		= 186,
		asBC_JLowZ			= 187,
		asBC_JLowNZ			= 188,
		asBC_AllocMem		= 189,
		asBC_SetListSize	= 190,
		asBC_PshListElmnt	= 191,
		asBC_SetListType	= 192,
		asBC_POWi			= 193,
		asBC_POWu			= 194,
		asBC_POWf			= 195,
		asBC_POWd			= 196,
		asBC_POWdi			= 197,
		asBC_POWi64			= 198,
		asBC_POWu64			= 199,
		asBC_Thiscall1		= 200,
		asBC_MAXBYTECODE	= 201,

		// Temporary tokens. Can't be output to the final program
		asBC_TryBlock		= 250,
		asBC_VarDecl		= 251,
		asBC_Block			= 252,
		asBC_ObjInfo		= 253,
		asBC_LINE			= 254,
		asBC_LABEL			= 255
	} asEBCInstr;

	// Instruction types
	typedef enum {
		asBCTYPE_INFO         = 0,
		asBCTYPE_NO_ARG       = 1,
		asBCTYPE_W_ARG        = 2,
		asBCTYPE_wW_ARG       = 3,
		asBCTYPE_DW_ARG       = 4,
		asBCTYPE_rW_DW_ARG    = 5,
		asBCTYPE_QW_ARG       = 6,
		asBCTYPE_DW_DW_ARG    = 7,
		asBCTYPE_wW_rW_rW_ARG = 8,
		asBCTYPE_wW_QW_ARG    = 9,
		asBCTYPE_wW_rW_ARG    = 10,
		asBCTYPE_rW_ARG       = 11,
		asBCTYPE_wW_DW_ARG    = 12,
		asBCTYPE_wW_rW_DW_ARG = 13,
		asBCTYPE_rW_rW_ARG    = 14,
		asBCTYPE_wW_W_ARG     = 15,
		asBCTYPE_QW_DW_ARG    = 16,
		asBCTYPE_rW_QW_ARG    = 17,
		asBCTYPE_W_DW_ARG     = 18,
		asBCTYPE_rW_W_DW_ARG  = 19,
		asBCTYPE_rW_DW_DW_ARG = 20
	} asEBCType;

	// Instruction type sizes
	const int asBCTypeSize[21] = {
		0, // asBCTYPE_INFO
		1, // asBCTYPE_NO_ARG
		1, // asBCTYPE_W_ARG
		1, // asBCTYPE_wW_ARG
		2, // asBCTYPE_DW_ARG
		2, // asBCTYPE_rW_DW_ARG
		3, // asBCTYPE_QW_ARG
		3, // asBCTYPE_DW_DW_ARG
		2, // asBCTYPE_wW_rW_rW_ARG
		3, // asBCTYPE_wW_QW_ARG
		2, // asBCTYPE_wW_rW_ARG
		1, // asBCTYPE_rW_ARG
		2, // asBCTYPE_wW_DW_ARG
		3, // asBCTYPE_wW_rW_DW_ARG
		2, // asBCTYPE_rW_rW_ARG
		2, // asBCTYPE_wW_W_ARG
		4, // asBCTYPE_QW_DW_ARG
		3, // asBCTYPE_rW_QW_ARG
		2, // asBCTYPE_W_DW_ARG
		3, // asBCTYPE_rW_W_DW_ARG
		3  // asBCTYPE_rW_DW_DW_ARG
	};

	// Instruction info
	typedef struct {
		asEBCInstr  bc;
		asEBCType   type;
		int         stackInc;
		const char *name;
	} asSBCInfo;

	#ifndef AS_64BIT_PTR
		#define asBCTYPE_PTR_ARG    asBCTYPE_DW_ARG
		#define asBCTYPE_PTR_DW_ARG asBCTYPE_DW_DW_ARG
		#define asBCTYPE_wW_PTR_ARG asBCTYPE_wW_DW_ARG
		#define asBCTYPE_rW_PTR_ARG asBCTYPE_rW_DW_ARG
		#ifndef AS_PTR_SIZE
			#define AS_PTR_SIZE 1
		#endif
	#else
		#define asBCTYPE_PTR_ARG    asBCTYPE_QW_ARG
		#define asBCTYPE_PTR_DW_ARG asBCTYPE_QW_DW_ARG
		#define asBCTYPE_wW_PTR_ARG asBCTYPE_wW_QW_ARG
		#define asBCTYPE_rW_PTR_ARG asBCTYPE_rW_QW_ARG
		#ifndef AS_PTR_SIZE
			#define AS_PTR_SIZE 2
		#endif
	#endif

	#define asBCINFO(b,t,s) {asBC_##b, asBCTYPE_##t, s, #b}
	#define asBCINFO_DUMMY(b) {asBC_MAXBYTECODE, asBCTYPE_INFO, 0, "BC_" #b}

	const asSBCInfo asBCInfo[256] = {
			asBCINFO(PopPtr,	NO_ARG,			-AS_PTR_SIZE),
			asBCINFO(PshGPtr,	PTR_ARG,		AS_PTR_SIZE),
			asBCINFO(PshC4,		DW_ARG,			1),
			asBCINFO(PshV4,		rW_ARG,			1),
			asBCINFO(PSF,		rW_ARG,			AS_PTR_SIZE),
			asBCINFO(SwapPtr,	NO_ARG,			0),
			asBCINFO(NOT,		rW_ARG,			0),
			asBCINFO(PshG4,		PTR_ARG,		1),
			asBCINFO(LdGRdR4,	wW_PTR_ARG,		0),
			asBCINFO(CALL,		DW_ARG,			0xFFFF),
			asBCINFO(RET,		W_ARG,			0xFFFF),
			asBCINFO(JMP,		DW_ARG,			0),
			asBCINFO(JZ,		DW_ARG,			0),
			asBCINFO(JNZ,		DW_ARG,			0),
			asBCINFO(JS,		DW_ARG,			0),
			asBCINFO(JNS,		DW_ARG,			0),
			asBCINFO(JP,		DW_ARG,			0),
			asBCINFO(JNP,		DW_ARG,			0),
			asBCINFO(TZ,		NO_ARG,			0),
			asBCINFO(TNZ,		NO_ARG,			0),
			asBCINFO(TS,		NO_ARG,			0),
			asBCINFO(TNS,		NO_ARG,			0),
			asBCINFO(TP,		NO_ARG,			0),
			asBCINFO(TNP,		NO_ARG,			0),
			asBCINFO(NEGi,		rW_ARG,			0),
			asBCINFO(NEGf,		rW_ARG,			0),
			asBCINFO(NEGd,		rW_ARG,			0),
			asBCINFO(INCi16,	NO_ARG,			0),
			asBCINFO(INCi8,		NO_ARG,			0),
			asBCINFO(DECi16,	NO_ARG,			0),
			asBCINFO(DECi8,		NO_ARG,			0),
			asBCINFO(INCi,		NO_ARG,			0),
			asBCINFO(DECi,		NO_ARG,			0),
			asBCINFO(INCf,		NO_ARG,			0),
			asBCINFO(DECf,		NO_ARG,			0),
			asBCINFO(INCd,		NO_ARG,			0),
			asBCINFO(DECd,		NO_ARG,			0),
			asBCINFO(IncVi,		rW_ARG,			0),
			asBCINFO(DecVi,		rW_ARG,			0),
			asBCINFO(BNOT,		rW_ARG,			0),
			asBCINFO(BAND,		wW_rW_rW_ARG,	0),
			asBCINFO(BOR,		wW_rW_rW_ARG,	0),
			asBCINFO(BXOR,		wW_rW_rW_ARG,	0),
			asBCINFO(BSLL,		wW_rW_rW_ARG,	0),
			asBCINFO(BSRL,		wW_rW_rW_ARG,	0),
			asBCINFO(BSRA,		wW_rW_rW_ARG,	0),
			asBCINFO(COPY,		W_DW_ARG,		-AS_PTR_SIZE),
			asBCINFO(PshC8,		QW_ARG,			2),
			asBCINFO(PshVPtr,	rW_ARG,			AS_PTR_SIZE),
			asBCINFO(RDSPtr,	NO_ARG,			0),
			asBCINFO(CMPd,		rW_rW_ARG,		0),
			asBCINFO(CMPu,		rW_rW_ARG,		0),
			asBCINFO(CMPf,		rW_rW_ARG,		0),
			asBCINFO(CMPi,		rW_rW_ARG,		0),
			asBCINFO(CMPIi,		rW_DW_ARG,		0),
			asBCINFO(CMPIf,		rW_DW_ARG,		0),
			asBCINFO(CMPIu,		rW_DW_ARG,		0),
			asBCINFO(JMPP,		rW_ARG,			0),
			asBCINFO(PopRPtr,	NO_ARG,			-AS_PTR_SIZE),
			asBCINFO(PshRPtr,	NO_ARG,			AS_PTR_SIZE),
			asBCINFO(STR,		W_ARG,			1+AS_PTR_SIZE),
			asBCINFO(CALLSYS,	DW_ARG,			0xFFFF),
			asBCINFO(CALLBND,	DW_ARG,			0xFFFF),
			asBCINFO(SUSPEND,	NO_ARG,			0),
			asBCINFO(ALLOC,		PTR_DW_ARG,		0xFFFF),
			asBCINFO(FREE,		wW_PTR_ARG,		0),
			asBCINFO(LOADOBJ,	rW_ARG,			0),
			asBCINFO(STOREOBJ,	wW_ARG,			0),
			asBCINFO(GETOBJ,	W_ARG,			0),
			asBCINFO(REFCPY,	PTR_ARG,		-AS_PTR_SIZE),
			asBCINFO(CHKREF,	NO_ARG,			0),
			asBCINFO(GETOBJREF,	W_ARG,			0),
			asBCINFO(GETREF,	W_ARG,			0),
			asBCINFO(PshNull,	NO_ARG,			AS_PTR_SIZE),
			asBCINFO(ClrVPtr,	wW_ARG,			0),
			asBCINFO(OBJTYPE,	PTR_ARG,		AS_PTR_SIZE),
			asBCINFO(TYPEID,	DW_ARG,			1),
			asBCINFO(SetV4,		wW_DW_ARG,		0),
			asBCINFO(SetV8,		wW_QW_ARG,		0),
			asBCINFO(ADDSi,		W_DW_ARG,		0),
			asBCINFO(CpyVtoV4,	wW_rW_ARG,		0),
			asBCINFO(CpyVtoV8,	wW_rW_ARG,		0),
			asBCINFO(CpyVtoR4,	rW_ARG,			0),
			asBCINFO(CpyVtoR8,	rW_ARG,			0),
			asBCINFO(CpyVtoG4,	rW_PTR_ARG,		0),
			asBCINFO(CpyRtoV4,	wW_ARG,			0),
			asBCINFO(CpyRtoV8,	wW_ARG,			0),
			asBCINFO(CpyGtoV4,	wW_PTR_ARG,		0),
			asBCINFO(WRTV1,		rW_ARG,			0),
			asBCINFO(WRTV2,		rW_ARG,			0),
			asBCINFO(WRTV4,		rW_ARG,			0),
			asBCINFO(WRTV8,		rW_ARG,			0),
			asBCINFO(RDR1,		wW_ARG,			0),
			asBCINFO(RDR2,		wW_ARG,			0),
			asBCINFO(RDR4,		wW_ARG,			0),
			asBCINFO(RDR8,		wW_ARG,			0),
			asBCINFO(LDG,		PTR_ARG,		0),
			asBCINFO(LDV,		rW_ARG,			0),
			asBCINFO(PGA,		PTR_ARG,		AS_PTR_SIZE),
			asBCINFO(CmpPtr,	rW_rW_ARG,		0),
			asBCINFO(VAR,		rW_ARG,			AS_PTR_SIZE),
			asBCINFO(iTOf,		rW_ARG,			0),
			asBCINFO(fTOi,		rW_ARG,			0),
			asBCINFO(uTOf,		rW_ARG,			0),
			asBCINFO(fTOu,		rW_ARG,			0),
			asBCINFO(sbTOi,		rW_ARG,			0),
			asBCINFO(swTOi,		rW_ARG,			0),
			asBCINFO(ubTOi,		rW_ARG,			0),
			asBCINFO(uwTOi,		rW_ARG,			0),
			asBCINFO(dTOi,		wW_rW_ARG,		0),
			asBCINFO(dTOu,		wW_rW_ARG,		0),
			asBCINFO(dTOf,		wW_rW_ARG,		0),
			asBCINFO(iTOd,		wW_rW_ARG,		0),
			asBCINFO(uTOd,		wW_rW_ARG,		0),
			asBCINFO(fTOd,		wW_rW_ARG,		0),
			asBCINFO(ADDi,		wW_rW_rW_ARG,	0),
			asBCINFO(SUBi,		wW_rW_rW_ARG,	0),
			asBCINFO(MULi,		wW_rW_rW_ARG,	0),
			asBCINFO(DIVi,		wW_rW_rW_ARG,	0),
			asBCINFO(MODi,		wW_rW_rW_ARG,	0),
			asBCINFO(ADDf,		wW_rW_rW_ARG,	0),
			asBCINFO(SUBf,		wW_rW_rW_ARG,	0),
			asBCINFO(MULf,		wW_rW_rW_ARG,	0),
			asBCINFO(DIVf,		wW_rW_rW_ARG,	0),
			asBCINFO(MODf,		wW_rW_rW_ARG,	0),
			asBCINFO(ADDd,		wW_rW_rW_ARG,	0),
			asBCINFO(SUBd,		wW_rW_rW_ARG,	0),
			asBCINFO(MULd,		wW_rW_rW_ARG,	0),
			asBCINFO(DIVd,		wW_rW_rW_ARG,	0),
			asBCINFO(MODd,		wW_rW_rW_ARG,	0),
			asBCINFO(ADDIi,		wW_rW_DW_ARG,	0),
			asBCINFO(SUBIi,		wW_rW_DW_ARG,	0),
			asBCINFO(MULIi,		wW_rW_DW_ARG,	0),
			asBCINFO(ADDIf,		wW_rW_DW_ARG,	0),
			asBCINFO(SUBIf,		wW_rW_DW_ARG,	0),
			asBCINFO(MULIf,		wW_rW_DW_ARG,	0),
			asBCINFO(SetG4,		PTR_DW_ARG,		0),
			asBCINFO(ChkRefS,	NO_ARG,			0),
			asBCINFO(ChkNullV,	rW_ARG,			0),
			asBCINFO(CALLINTF,	DW_ARG,			0xFFFF),
			asBCINFO(iTOb,		rW_ARG,			0),
			asBCINFO(iTOw,		rW_ARG,			0),
			asBCINFO(SetV1,		wW_DW_ARG,		0),
			asBCINFO(SetV2,		wW_DW_ARG,		0),
			asBCINFO(Cast,		DW_ARG,			-AS_PTR_SIZE),
			asBCINFO(i64TOi,	wW_rW_ARG,		0),
			asBCINFO(uTOi64,	wW_rW_ARG,		0),
			asBCINFO(iTOi64,	wW_rW_ARG,		0),
			asBCINFO(fTOi64,	wW_rW_ARG,		0),
			asBCINFO(dTOi64,	rW_ARG,			0),
			asBCINFO(fTOu64,	wW_rW_ARG,		0),
			asBCINFO(dTOu64,	rW_ARG,			0),
			asBCINFO(i64TOf,	wW_rW_ARG,		0),
			asBCINFO(u64TOf,	wW_rW_ARG,		0),
			asBCINFO(i64TOd,	rW_ARG,			0),
			asBCINFO(u64TOd,	rW_ARG,			0),
			asBCINFO(NEGi64,	rW_ARG,			0),
			asBCINFO(INCi64,	NO_ARG,			0),
			asBCINFO(DECi64,	NO_ARG,			0),
			asBCINFO(BNOT64,	rW_ARG,			0),
			asBCINFO(ADDi64,	wW_rW_rW_ARG,	0),
			asBCINFO(SUBi64,	wW_rW_rW_ARG,	0),
			asBCINFO(MULi64,	wW_rW_rW_ARG,	0),
			asBCINFO(DIVi64,	wW_rW_rW_ARG,	0),
			asBCINFO(MODi64,	wW_rW_rW_ARG,	0),
			asBCINFO(BAND64,	wW_rW_rW_ARG,	0),
			asBCINFO(BOR64,		wW_rW_rW_ARG,	0),
			asBCINFO(BXOR64,	wW_rW_rW_ARG,	0),
			asBCINFO(BSLL64,	wW_rW_rW_ARG,	0),
			asBCINFO(BSRL64,	wW_rW_rW_ARG,	0),
			asBCINFO(BSRA64,	wW_rW_rW_ARG,	0),
			asBCINFO(CMPi64,	rW_rW_ARG,		0),
			asBCINFO(CMPu64,	rW_rW_ARG,		0),
			asBCINFO(ChkNullS,	W_ARG,			0),
			asBCINFO(ClrHi,		NO_ARG,			0),
			asBCINFO(JitEntry,	PTR_ARG,		0),
			asBCINFO(CallPtr,	rW_ARG,			0xFFFF),
			asBCINFO(FuncPtr,	PTR_ARG,		AS_PTR_SIZE),
			asBCINFO(LoadThisR,	W_DW_ARG,		0),
			asBCINFO(PshV8,		rW_ARG,			2),
			asBCINFO(DIVu,		wW_rW_rW_ARG,	0),
			asBCINFO(MODu,		wW_rW_rW_ARG,	0),
			asBCINFO(DIVu64,	wW_rW_rW_ARG,	0),
			asBCINFO(MODu64,	wW_rW_rW_ARG,	0),
			asBCINFO(LoadRObjR,	rW_W_DW_ARG,	0),
			asBCINFO(LoadVObjR,	rW_W_DW_ARG,	0),
			asBCINFO(RefCpyV,	wW_PTR_ARG,		0),
			asBCINFO(JLowZ,		DW_ARG,			0),
			asBCINFO(JLowNZ,	DW_ARG,			0),
			asBCINFO(AllocMem,	wW_DW_ARG,		0),
			asBCINFO(SetListSize, rW_DW_DW_ARG,	0),
			asBCINFO(PshListElmnt, rW_DW_ARG,	AS_PTR_SIZE),
			asBCINFO(SetListType, rW_DW_DW_ARG,	0),
			asBCINFO(POWi,		wW_rW_rW_ARG,	0),
			asBCINFO(POWu,		wW_rW_rW_ARG,	0),
			asBCINFO(POWf,		wW_rW_rW_ARG,	0),
			asBCINFO(POWd,		wW_rW_rW_ARG,	0),
			asBCINFO(POWdi,		wW_rW_rW_ARG,	0),
			asBCINFO(POWi64,	wW_rW_rW_ARG,	0),
			asBCINFO(POWu64,	wW_rW_rW_ARG,	0),
			asBCINFO(Thiscall1, DW_ARG,			-AS_PTR_SIZE-1),

			asBCINFO_DUMMY(201),
			asBCINFO_DUMMY(202),
			asBCINFO_DUMMY(203),
			asBCINFO_DUMMY(204),
			asBCINFO_DUMMY(205),
			asBCINFO_DUMMY(206),
			asBCINFO_DUMMY(207),
			asBCINFO_DUMMY(208),
			asBCINFO_DUMMY(209),
			asBCINFO_DUMMY(210),
			asBCINFO_DUMMY(211),
			asBCINFO_DUMMY(212),
			asBCINFO_DUMMY(213),
			asBCINFO_DUMMY(214),
			asBCINFO_DUMMY(215),
			asBCINFO_DUMMY(216),
			asBCINFO_DUMMY(217),
			asBCINFO_DUMMY(218),
			asBCINFO_DUMMY(219),
			asBCINFO_DUMMY(220),
			asBCINFO_DUMMY(221),
			asBCINFO_DUMMY(222),
			asBCINFO_DUMMY(223),
			asBCINFO_DUMMY(224),
			asBCINFO_DUMMY(225),
			asBCINFO_DUMMY(226),
			asBCINFO_DUMMY(227),
			asBCINFO_DUMMY(228),
			asBCINFO_DUMMY(229),
			asBCINFO_DUMMY(230),
			asBCINFO_DUMMY(231),
			asBCINFO_DUMMY(232),
			asBCINFO_DUMMY(233),
			asBCINFO_DUMMY(234),
			asBCINFO_DUMMY(235),
			asBCINFO_DUMMY(236),
			asBCINFO_DUMMY(237),
			asBCINFO_DUMMY(238),
			asBCINFO_DUMMY(239),
			asBCINFO_DUMMY(240),
			asBCINFO_DUMMY(241),
			asBCINFO_DUMMY(242),
			asBCINFO_DUMMY(243),
			asBCINFO_DUMMY(244),
			asBCINFO_DUMMY(245),
			asBCINFO_DUMMY(246),
			asBCINFO_DUMMY(247),
			asBCINFO_DUMMY(248),
			asBCINFO_DUMMY(249),

			asBCINFO(TryBlock,		DW_ARG,			0),
			asBCINFO(VarDecl,		W_ARG,			0),
			asBCINFO(Block,			INFO,			0),
			asBCINFO(ObjInfo,		rW_DW_ARG,		0),
			asBCINFO(LINE,			INFO,			0),
			asBCINFO(LABEL,			INFO,			0)
	};

	// Macros to access bytecode instruction arguments
	#define asBC_DWORDARG(x)  (*(((asDWORD*)x)+1))
	#define asBC_INTARG(x)    (*(int*)(((asDWORD*)x)+1))
	#define asBC_QWORDARG(x)  (*(asQWORD*)(((asDWORD*)x)+1))
	#define asBC_FLOATARG(x)  (*(float*)(((asDWORD*)x)+1))
	#define asBC_PTRARG(x)    (*(asPWORD*)(((asDWORD*)x)+1))
	#define asBC_WORDARG0(x)  (*(((asWORD*)x)+1))
	#define asBC_WORDARG1(x)  (*(((asWORD*)x)+2))
	#define asBC_SWORDARG0(x) (*(((short*)x)+1))
	#define asBC_SWORDARG1(x) (*(((short*)x)+2))
	#define asBC_SWORDARG2(x) (*(((short*)x)+3))


#endif

